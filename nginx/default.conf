server {
    listen 80 default_server;
    listen [::]:80 default_server;


    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;

    server_name ${APPLICATION_URL};

    server_tokens off;
    # Закомментировано на время разработки чтобы работал CORS
#     add_header  X-Frame-Options "SAMEORIGIN" always;
#     add_header  X-XSS-Protection "1; mode=block" always;
#     add_header  X-Content-Type-Options "nosniff" always;
#     add_header  Referrer-Policy "no-referrer-when-downgrade" always;
#     add_header  Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;

    gzip on;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_proxied no-cache no-store private expired auth;
    gzip_types text/css application/javascript image/svg+xml;
    gzip_vary on;

    location /api/(docs|redoc|openapi.json) {
        proxy_pass http://backend:8000/;
    }

    location /api {
        return 302 /api/;
    }

    location /api/ {
        proxy_pass http://backend:8000/;
        proxy_set_header   Host                 $host;
        proxy_set_header   X-Real-IP            $remote_addr;
        proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto    $scheme;
    }

    location / {
        alias /var/html/frontend/;
        index index.html;
        try_files $uri $uri/ /index.html;
    }

    location /static/ {
        alias /var/html/static/;
    }

    location /static/tasks {
        alias /var/html/tasks/;
    }

    location /static/user_reports/ {
    # Подключается проверка авторизации, пускает только после получения статуса 200
#        auth_request /auth;
#        auth_request_set $auth_status $upstream_status;
        alias /var/html/user_reports/;
#        error_page 401 403 = @unauthorized;
    }

    location @unauthorized {
        default_type "";
        return 401 '{"detail": "Необходима авторизация"}';
        add_header Content-Type "application/json" always;
    }

    # Здесь указывается сервис для проверки авторизации администратора/психолога
    location = /auth {
        internal;
        proxy_pass              http://backend:8000/administrators/me;
        proxy_pass_request_body off;
        proxy_set_header        Content-Length "";
        proxy_set_header        X-Original-URI $request_uri;
    }

    location = /healthcheck {
        proxy_pass http://backend:8000/healthcheck;
    }
}
