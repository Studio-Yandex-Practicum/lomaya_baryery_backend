"""added wait_report status to UserTask and excluded status to Request

Revision ID: 0ae05a7f87ee
Revises: 54c6488c59cc
Create Date: 2022-10-27 11:00:27.330285

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0ae05a7f87ee'
down_revision = '54c6488c59cc'
branch_labels = None
depends_on = None

USER_TASK_TABLE_NAME = 'user_tasks'
USER_TASK_ENUM_NAME = "user_task_status"
USER_TASK_ENUM_COLUMN_NAME = "status"
USER_TASK_TEMP_ENUM_NAME = "temp_" + USER_TASK_ENUM_COLUMN_NAME

USER_TASK_OLD_STATUSES = ("new", "under_review", "approved", "declined",)
USER_TASK_NEW_STATUS = "wait_report"

REQUEST_TABLE_NAME = 'requests'
REQUEST_ENUM_NAME = "request_status"
REQUEST_ENUM_COLUMN_NAME = "status"
REQUEST_TEMP_ENUM_NAME = "temp_" + REQUEST_ENUM_COLUMN_NAME

REQUEST_OLD_STATUSES = ("declined", "approved", "pending", "repeated request",)
REQUEST_NEW_STATUS = "excluded"

USER_TASK_NEW_STATUSES = (*USER_TASK_OLD_STATUSES, USER_TASK_NEW_STATUS,)

USER_TASK_NEW_STATUS_ENUM = sa.Enum(*USER_TASK_NEW_STATUSES, name=USER_TASK_ENUM_NAME)
USER_TASK_NEW_STATUS_ENUM_PG = postgresql.ENUM(*USER_TASK_NEW_STATUSES, name=USER_TASK_ENUM_NAME, create_type=False)

USER_TASK_OLD_STATUS_ENUM = sa.Enum(*USER_TASK_OLD_STATUSES, name=USER_TASK_ENUM_NAME)
USER_TASK_OLD_STATUS_ENUM_PG = postgresql.ENUM(*USER_TASK_OLD_STATUSES, name=USER_TASK_ENUM_NAME, create_type=False)

USER_TASK_TEMP_STATUS_ENUM = sa.Enum(*USER_TASK_NEW_STATUSES, name=USER_TASK_TEMP_ENUM_NAME)
USER_TASK_TEMP_STATUS_ENUM_PG = postgresql.ENUM(*USER_TASK_NEW_STATUSES, name=USER_TASK_TEMP_ENUM_NAME, create_type=False)

USER_TASK_VARIANT_NEW_ENUM = USER_TASK_NEW_STATUS_ENUM.with_variant(USER_TASK_NEW_STATUS_ENUM_PG, "postgresql")
USER_TASK_VARIANT_OLD_ENUM = USER_TASK_OLD_STATUS_ENUM.with_variant(USER_TASK_OLD_STATUS_ENUM_PG, "postgresql")
USER_TASK_VARIANT_TEMP_ENUM = USER_TASK_TEMP_STATUS_ENUM.with_variant(USER_TASK_TEMP_STATUS_ENUM_PG, "postgresql")

USER_TASK_TEMP_TABLE = sa.sql.table(
    USER_TASK_TABLE_NAME,
    sa.Column(
        USER_TASK_ENUM_COLUMN_NAME,
        USER_TASK_VARIANT_NEW_ENUM,
        nullable=False,
    )
)

REQUEST_NEW_STATUSES = (*REQUEST_OLD_STATUSES, REQUEST_NEW_STATUS,)

REQUEST_NEW_STATUS_ENUM = sa.Enum(*REQUEST_NEW_STATUSES, name=REQUEST_ENUM_NAME)
REQUEST_NEW_STATUS_ENUM_PG = postgresql.ENUM(*REQUEST_NEW_STATUSES, name=REQUEST_ENUM_NAME, create_type=False)

REQUEST_OLD_STATUS_ENUM = sa.Enum(*REQUEST_OLD_STATUSES, name=REQUEST_ENUM_NAME)
REQUEST_OLD_STATUS_ENUM_PG = postgresql.ENUM(*REQUEST_OLD_STATUSES, name=REQUEST_ENUM_NAME, create_type=False)

REQUEST_TEMP_STATUS_ENUM = sa.Enum(*REQUEST_NEW_STATUSES, name=REQUEST_TEMP_ENUM_NAME)
REQUEST_TEMP_STATUS_ENUM_PG = postgresql.ENUM(*REQUEST_NEW_STATUSES, name=REQUEST_TEMP_ENUM_NAME, create_type=False)

REQUEST_VARIANT_NEW_ENUM = REQUEST_NEW_STATUS_ENUM.with_variant(REQUEST_NEW_STATUS_ENUM_PG, "postgresql")
REQUEST_VARIANT_OLD_ENUM = REQUEST_OLD_STATUS_ENUM.with_variant(REQUEST_OLD_STATUS_ENUM_PG, "postgresql")
REQUEST_VARIANT_TEMP_ENUM = REQUEST_TEMP_STATUS_ENUM.with_variant(REQUEST_TEMP_STATUS_ENUM_PG, "postgresql")

REQUEST_TEMP_TABLE = sa.sql.table(
    REQUEST_TABLE_NAME,
    sa.Column(
        REQUEST_ENUM_COLUMN_NAME,
        REQUEST_VARIANT_NEW_ENUM,
        nullable=False,
    )
)




def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    USER_TASK_VARIANT_TEMP_ENUM.create(op.get_bind(), checkfirst=False)
    op.alter_column(
        USER_TASK_TABLE_NAME,
        USER_TASK_ENUM_COLUMN_NAME,
        existing_type=USER_TASK_VARIANT_OLD_ENUM,
        type_=USER_TASK_VARIANT_TEMP_ENUM,
        postgresql_using=f"{USER_TASK_ENUM_COLUMN_NAME}::text::{USER_TASK_TEMP_ENUM_NAME}"
    )
    USER_TASK_OLD_STATUS_ENUM.drop(op.get_bind(), checkfirst=False)
    USER_TASK_VARIANT_NEW_ENUM.create(op.get_bind(), checkfirst=False)
    op.alter_column(
        USER_TASK_TABLE_NAME,
        USER_TASK_ENUM_COLUMN_NAME,
        existing_type=USER_TASK_VARIANT_TEMP_ENUM,
        type_=USER_TASK_VARIANT_NEW_ENUM,
        postgresql_using=f"{USER_TASK_ENUM_COLUMN_NAME}::text::{USER_TASK_ENUM_NAME}"
    )
    USER_TASK_VARIANT_TEMP_ENUM.drop(op.get_bind(), checkfirst=False)

    REQUEST_VARIANT_TEMP_ENUM.create(op.get_bind(), checkfirst=False)
    op.alter_column(
        REQUEST_TABLE_NAME,
        REQUEST_ENUM_COLUMN_NAME,
        existing_type=REQUEST_VARIANT_OLD_ENUM,
        type_=REQUEST_VARIANT_TEMP_ENUM,
        postgresql_using=f"{REQUEST_ENUM_COLUMN_NAME}::text::{REQUEST_TEMP_ENUM_NAME}"
    )
    REQUEST_OLD_STATUS_ENUM.drop(op.get_bind(), checkfirst=False)
    REQUEST_VARIANT_NEW_ENUM.create(op.get_bind(), checkfirst=False)
    op.alter_column(
        REQUEST_TABLE_NAME,
        REQUEST_ENUM_COLUMN_NAME,
        existing_type=REQUEST_VARIANT_TEMP_ENUM,
        type_=REQUEST_VARIANT_NEW_ENUM,
        postgresql_using=f"{REQUEST_ENUM_COLUMN_NAME}::text::{REQUEST_ENUM_NAME}"
    )
    REQUEST_VARIANT_TEMP_ENUM.drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(
        USER_TASK_TEMP_TABLE
        .update()
        .where(USER_TASK_TEMP_TABLE.c.status == USER_TASK_NEW_STATUS)
        .values(status=USER_TASK_OLD_STATUSES[0])
    )
    USER_TASK_VARIANT_TEMP_ENUM.create(op.get_bind(), checkfirst=False)
    op.alter_column(
        USER_TASK_TABLE_NAME,
        USER_TASK_ENUM_COLUMN_NAME,
        existing_type=USER_TASK_VARIANT_NEW_ENUM,
        type_=USER_TASK_VARIANT_TEMP_ENUM,
        existing_nullable=False,
        postgresql_using=f"{USER_TASK_ENUM_COLUMN_NAME}::text::{USER_TASK_TEMP_ENUM_NAME}",
    )
    USER_TASK_VARIANT_NEW_ENUM.drop(op.get_bind(), checkfirst=False)
    USER_TASK_VARIANT_OLD_ENUM.create(op.get_bind(), checkfirst=False)
    op.alter_column(
        USER_TASK_TABLE_NAME,
        USER_TASK_ENUM_COLUMN_NAME,
        existing_type=USER_TASK_VARIANT_TEMP_ENUM,
        type_=USER_TASK_VARIANT_OLD_ENUM,
        existing_nullable=False,
        postgresql_using=f"{USER_TASK_ENUM_COLUMN_NAME}::text::{USER_TASK_ENUM_NAME}",
    )
    USER_TASK_VARIANT_TEMP_ENUM.drop(op.get_bind(), checkfirst=False)

    op.execute(
        REQUEST_TEMP_TABLE
        .update()
        .where(REQUEST_TEMP_TABLE.c.status == REQUEST_NEW_STATUS)
        .values(status=REQUEST_OLD_STATUSES[0])
    )
    REQUEST_VARIANT_TEMP_ENUM.create(op.get_bind(), checkfirst=False)
    op.alter_column(
        REQUEST_TABLE_NAME,
        REQUEST_ENUM_COLUMN_NAME,
        existing_type=REQUEST_VARIANT_NEW_ENUM,
        type_=REQUEST_VARIANT_TEMP_ENUM,
        existing_nullable=False,
        postgresql_using=f"{REQUEST_ENUM_COLUMN_NAME}::text::{REQUEST_TEMP_ENUM_NAME}",
    )
    REQUEST_VARIANT_NEW_ENUM.drop(op.get_bind(), checkfirst=False)
    REQUEST_VARIANT_OLD_ENUM.create(op.get_bind(), checkfirst=False)
    op.alter_column(
        REQUEST_TABLE_NAME,
        REQUEST_ENUM_COLUMN_NAME,
        existing_type=REQUEST_VARIANT_TEMP_ENUM,
        type_=REQUEST_VARIANT_OLD_ENUM,
        existing_nullable=False,
        postgresql_using=f"{REQUEST_ENUM_COLUMN_NAME}::text::{REQUEST_ENUM_NAME}",
    )
    REQUEST_VARIANT_TEMP_ENUM.drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###
